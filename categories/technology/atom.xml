<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Technology | David Souther]]></title>
  <link href="http://DavidSouther.github.io/categories/technology/atom.xml" rel="self"/>
  <link href="http://DavidSouther.github.io/"/>
  <updated>2014-02-09T14:26:50-05:00</updated>
  <id>http://DavidSouther.github.io/</id>
  <author>
    <name><![CDATA[David Souther]]></name>
    <email><![CDATA[davidsouther@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cucumber Selenium Mappings Model]]></title>
    <link href="http://DavidSouther.github.io/2014/01/cucumber-selenium-mappings-model"/>
    <updated>2014-01-27T10:52:00-05:00</updated>
    <id>http://DavidSouther.github.io/2014/01/cucumber-selenium-mappings-model</id>
    <content type="html"><![CDATA[<p>To create a ubiquitous language for a project&rsquo;s interface, I recommend creating
a semantic mapping. This is an in-code key/value object defining words and
phrases in a <a href="http://martinfowler.com/bliki/UbiquitousLanguage.html">ubiquitous language</a> that maps to a specific CSS
selector for use in code. This has many advantages, with a couple draw backs.
The benefits of having a ubiquitous language are documented in various sources,
but in sum, mean less time wasted in a team discussing which piece of the
solution is under discussion. This exact solution has some specific drawbacks,
that I&rsquo;ll mention later.</p>

<p>A Cuke mapping, here, is a set of nouns and noun phrases that describe some part
of a DOM interface. In one example, the application has a main content area. The
mapping is relatively simple: <code>'main content': '#main'</code> (coffeescript key/value
bare object). The same application has two distinct menu areas, which are mapped
with <code>'main menu': 'main [tab-nav="tab-nav"]'</code> and <code>'page menu': 'main div
[tab-nav="tab-nav"]'</code>. The subtleties in DOM structure are hidden behind this
mappings concept. If the DOM changes, the tests can be fixed by eding the
selector in a single place.</p>

<!-- more -->


<h2>Given/When/Then</h2>

<p>Short aside to cover the basics of Cuke best practices. As is recommended in
automated testing scenarios, each test has five phases. Two of those phases are
hidden in the test harness, the before and after test setup phases. The test
itself is broken into application state setup, taking an action, and asserting
aspects of the final state. Yes, testing is exercising the big old state
machine of your application &ndash; put the program in some state, take an action,
make sure it&rsquo;s in the expected next state.</p>

<p>In Cucumber, these phases are described with the phrases <code>Given</code>, <code>When</code>, and
<code>Then</code>. The <code>Given</code> assertions are grouped at the beginning of the test, where
they include things specific to the test that the <code>Before</code> steps haven&rsquo;t
covered. For a large application I work on, <code>Before</code> guarantees the browser will
be open, and on the root page of the application (<code>http://localhost:1024/</code>).
Because of this, we sometimes drop the <code>Given</code> state, or use a dummy noop step,
<code>Given the user is on the home page</code>. However, when verifying some action on a
specific page, we will use <code>Given</code> to navigate to the page under test. <code>Given
the user navigates to "Performance" "Summary"</code>.</p>

<p>The <code>When</code> and <code>Then</code> tests are pretty straightforward, and for this application
generally click some DOM node, then check some other DOM status, often for the
presence of a string in text, or the presence or absence of a node. Some of our
tests, however, assert rendered properties, especially dimension constraints.
For instance, we have asserts to check if elements of the page are on the top,
left, or center of a page, or meet certain minimum and maximum size constraints.
Finally, we have tests that assert look and feel by comparing screenshot image
differences.</p>

<p>There is some discretion in choosing when to use <code>Given</code> vs when to use
<code>When</code> &ndash; are the values filled in a form part of the given condition, or part of
the test action? I find this depends on what state transition is under test. If
the test is verifying the form shows validation rules for invalid input, the
form filling should be a <code>When</code> statement. On the other hand, if the test is
verifying a &ldquo;Thanks for shopping!&rdquo; page, the form should be filled in <code>Given</code>
steps. Cucumber itself relaxes constraints, and doesn&rsquo;t actually enforce only
steps only run in their defined phase, so in reality any step can match
anywhere.</p>

<h2>Mappings</h2>

<p>When writing steps, cucumber uses regular expression matching groups to pass
arguments to the step body. Generally, these the form <code>/"([^"]+)"/</code>, matching
any non-zero length of string inside double quotation marks. That value then is
passed to the step definition function, in argument order. For cuke mappings, we
constrain the valid items within quotes, to either be a key in the mappings
table, or a string literal to assert in some test.</p>

<p>Here&rsquo;s a line from our tests.</p>

<p>```
Then the &ldquo;header nav&rdquo; should have links to</p>

<pre><code>"""
Dashboard
Portfolios
"""
</code></pre>

<p>```</p>

<p>The step definition matches the first quote group against the mappings object,
here finding the expression <code>"#header nav"</code> as the CSS to select with. It can
then look for links to each of the titles in the list of expected links. The
full step is defined as</p>

<p>```coffeescript</p>

<pre><code>@Then /"([^"]+)" should have links to/, (selector, list)-&gt;
    selector = mappings[selector] + ' a'
    @world.text(selector)
    .then (text)-&gt;
        for link in list.split '\n'
            text.indexOf(link).should.be.greaterThan -1
</code></pre>

<p>```</p>

<p>This test creates a selector by looking for any <code>a</code> children of the selector
for <code>"header nav"</code>, asking the world to return the joined text for all those
elements, and asserting that each link text is in that joined string. Also, this
test is using the <a href="https://github.com/DavidSouther/qcumber">qcumber</a> cucumberjs library, which makes steps
behave with promises &ndash; a step can return a value, throw an exception, or return
a promise. It will pass if a value is returned or a returned promise resolves,
and will fail if an exception is thrown, or a returned promise rejects.</p>

<h2>World</h2>

<p>The world object abstracts the details of working with a browser backend. This
allows an abstraction between the steps' browser interaction, and the actual
browser backend. Most commonly, <code>selenium-webdriver</code> serves as the browser
backend, but that could be replaced with <code>browserstack-webdriver</code> for
<a href="http://www.browserstack.com/">browserstack</a> testing in CI or <a href="http://zombie.labnotes.org/">Zombie</a>, for headless,
pure-js testing. This extra abstraction provides a minimal jquery-esque API for
retrieving DOM content, across possible browser backends.</p>

<p>```coffeescript
module.exports = class World</p>

<pre><code>constructor: (capabilities = {browserName: "firefox"})-&gt;
    @driver = new webdriver.Builder().
        usingServer(process.env.SELENIUM_HUB).
        withCapabilities(capabilities).build()

    @driver.manage().timeouts().setScriptTimeout(10000)

#...

find: (selector)-&gt;
    @driver.findElement By.css selector

#...

text: (where)-&gt;
    @find(where).getText()
</code></pre>

<p>```</p>

<p>This world is an object instance that configures itself using some webdriver,
and has a method to do CSS lookup. It&rsquo;s taken from <a href="https://github.com/DavidSouther/qcumberbatch">qcumberbatch</a>,
a library I have that implements the concepts here.</p>

<h2>Limitations &amp; Benefits</h2>

<p>The largest intrinsic drawback in this approach is the lack of flexibility in
constructing selectors on the fly. While nothing in the code prevents it, it is
discouraged to build such selectors, because anything you&rsquo;d need to select in
the DOM should have its own name, listed in the mappings. Those names must be
part of the project as a whole, and known and agreed to (at least in
conversation) by not only the product team, but the entire product stakeholder
group. When dicussing the application, stakeholders must take care to use these
phrases from the ubiquitous language.</p>

<p>This, while taking discipline, becomes one benefit of this ubiquitous language
and mapping approach. Because there is a very limited subset of language to use
for the project, conversations spend less time mucking over meaning of words.
The meaning has already been defined and agreed to, and any mention of a phrase
is immediately understood. The tradeoff of extra work and discipline pays for
itseld in improved communication.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Mock Render]]></title>
    <link href="http://DavidSouther.github.io/2014/01/angularjs-mock-render"/>
    <updated>2014-01-05T11:30:00-05:00</updated>
    <id>http://DavidSouther.github.io/2014/01/angularjs-mock-render</id>
    <content type="html"><![CDATA[<p>We test. A lot. We have quite a few directives. We&rsquo;re using this mock render
function to quickly test those directives. It takes the simple html name of the
directive, an object with any parent scope properties, an object with any DOM
attributes to set, and a string to use for transclusion: <code>render(directive,
data = {}, attributes = {}, transclude = "")</code></p>

<!-- more -->


<p>```coffeescript render.coffee
toKeyVal = (attributes, separator = &lsquo; &rsquo;)&ndash;></p>

<pre><code>("#{key} = \"#{val}\"" for key, val of attributes)
    .join separator
</code></pre>

<p>if angular.mock</p>

<pre><code>window.render = angular.mock.render =
(directive, data = {}, attributes = {}, transclude = "")-&gt;
    $element = null
    inject ($compile, $rootScope)-&gt;
        $scope = $rootScope.$new()
        $scope[key] = val for key, val of data
        attributes = toKeyVal attributes

        template = $compile(
            "&lt;div #{directive} #{attributes}&gt;#{transclude}&lt;/div&gt;"
        )
        $element = template($scope)

        try $scope.$digest()
    $element
</code></pre>

<p>```</p>

<p>Its usage is pretty straight forward. Here, we are testing a directive that
emits some event when it has finished rendering data received from the
$httpBackend (configued elsewhere). We render the element, listen for the render
event when we&rsquo;ll run our test assertions, and flush the http backend to force
Angular to digest all the changes in the app. In this way, our test setup and
action phases are drastically simplified. Our test code shows the assertions our
business demands, not the setup our platform happens to use.</p>

<p>```coffeescript
should = chai.should()
describe &lsquo;Performance Overview&rsquo;, &ndash;></p>

<pre><code>describe 'directive', -&gt;

    beforeEach module 'nv-waves'

    it 'has some chart stuff.', -&gt; inject ($rootScope, $httpBackend)-&gt;
        $element = render 'performance-summary'

        $rootScope.$on 'Wave Rendered', -&gt;
            $element.find('svg').length.should.equal 2
            $element[0].querySelectorAll('.chart').length.should.equal 2
            $element[0].querySelectorAll('.grid').length.should.equal 2
            $element.scope().data.header.sortable.should.equal true

        $httpBackend.flush()
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing. It's Hard. Just Do It!]]></title>
    <link href="http://DavidSouther.github.io/2013/10/testing-its-hard-just-do-it"/>
    <updated>2013-10-30T13:31:11-04:00</updated>
    <id>http://DavidSouther.github.io/2013/10/testing-its-hard-just-do-it</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Linus's_Law">&ldquo;With enough eyeballs, all bugs are shallow.&rdquo;</a></p>

<p>The bug might be shallow when it&rsquo;s first found, but how does it never happen again? Automated Testing. When a bug is found, prove it exists with a test. Then, that bug is guaranteed to never happen again &ndash; a little computer gremlin with eagle-eye focus will look at that bug every time your program runs, and the bug will NEVER HAPPEN AGAIN. It will never happen, because if you come close to making that bug, the gremlin will make your console bleed with the red of a failed test.</p>

<blockquote><p>&ldquo;The three chief virtues of a programmer are: Laziness, Impatience and Hubris.&rdquo;
&ndash; Larry Wall (creator of Perl)</p></blockquote>

<!-- more -->


<p>That little gremlin I wrote to prove the (non)existence of a bug? That&rsquo;s me being lazy. I have absolutely zero desire to fix a bug a second time &ndash; that&rsquo;s time I could be playing ping pong, or writing a new operating system. That little gremlin better be fast, too, or I&rsquo;m not going to wait around for him. The gremlin must be small and focused, with a family of small, focused gremlins that can run all my critical tests (the features I&rsquo;m touching) in under 5 seconds, and my entire codebase quickly enough to not block anyone else on my team (<a href="http://codeascraft.com/2013/09/23/lxc-running-14000-tests-per-day-and-beyond-part-1/">or they will not test, because it takes too long to be useful</a>). My code always works correctly, the first time. At least, it does every time I write a test before I write a feature. I know most developers aren&rsquo;t as egotistical as I am, but I don&rsquo;t know a single good developer who doesn&rsquo;t want to take pride in the code they&rsquo;ve written. It&rsquo;s damned easy to take pride in code that Works Right.</p>

<h2>Why don&rsquo;t I test more often?</h2>

<p><span style="float:right"><img src="https://lh3.googleusercontent.com/OkcCl_KVOvD6J7q4w_mWsgvj01mc_3jqS_fKcKIZbJDqq5HMCoPE0J2fnJld_XA9Zxs21XSH429Rnwk9V-T_MHB19-Wk090pYtvHD0pGOUdf_QKls6HXaX-dUA" /></span></p>

<p>Testing is hard. It&rsquo;s not the way most programmers learned to program. The other side of the laziness sword? If it&rsquo;s easier to take a shortcut, to get code out the door, I probably will. Testing is in many cases as hard as writing production code, but for a completely different reason: testing requires discipline. Discipline is not, in my experience, something prided by the great hackers of our field. It is a completely different way to approach building software, and requires an equal level of commitment and experience to become comfortable for a developer or team. Without that discipline, shortcuts will happen, and developers won&rsquo;t write code.</p>

<p>Three things need to happen when a team gets to that point. The tests need to be easier to write. This is half experience and half toolkit &ndash; the test suite must be fast to run and easy to add tests, and I personally need to be familiar enough with the testing library to write the tests. The test suite must run, and pass, before any code is allowed out the door (coverage testing will guarantee a level of certainty that tests have indeed been written). The third and equally critical piece is support from the project&rsquo;s leadership. If the leadership of the team allows developers to slide and be (bad) lazy, testing will slip.</p>

<h3>Metaphorical Interlude</h3>

<pre>
           Drawing from a well,

       Deep and full and crystal clear.

         A ratchet won't slip.
</pre>


<p><span style="float:left"><img src="https://lh4.googleusercontent.com/4dgJC56kg--PvW2NHWSTtKr6H0RbQHFAi4pKitQOyUhOBT0KgAyX_Yau1efUdBnI4USrPk63-KEBB9Twrd-yRK8nN_yevJLYOpOullHdpi0hmpdHQgblbjwQYw" /></span></p>

<p>Programming is like drawing water from a well. When the well is shallow, and the bucket small, it&rsquo;s not too difficult a task. When the bucket is big, and the well deep, it becomes harder to draw the bucket, and every mistake can be more disastrous. Automated testing is like installing a ratchet on the rope &ndash; every time you write tested code, that bit of rope will never slip. Embracing test driven development is installing a pulley to hoist the bucket with the program. The force and exertion to write a feature halves, because you only write the actual half of the feature the customer needs.</p>

<h2>Excoriation of Excuses</h2>

<p>If you&rsquo;re a programmer and you don&rsquo;t write tests, I&rsquo;m going to assume you don&rsquo;t care enough about your code. I&rsquo;m going to assume that the code you&rsquo;re working on, you&rsquo;re fine with it being 80%. I&rsquo;m going to assume you are smarter than me, in a bad way. I am not smart enough to know whether I did or did not break the code you wrote, if I don&rsquo;t have a test suite that tells me if I broke it or not. I am probably not going to want to work on your project or component. I say this not because I think less of you, or want to belittle you, but because this is as much a wake-up call to myself. I say this to myself when I visit old code of my own, that I wrote without tests. It is disgusting and reprehensible to visit those code bases, and I have no desire to return to those projects, no matter how well intentioned they were.</p>

<p>If you&rsquo;re a manager and don&rsquo;t demand your team writes tests, I&rsquo;m going to assume you&rsquo;re penny-wise and pound-foolish. If your project is doing well now, I will put money on it collapsing with a bit of churn in your team. After about a quarter of your team has moved on or been replaced, your codebase will collapse into a mess of hard to find bugs, weird edge cases, and increasingly continued pressure to deliver new features when your team is simply unable to write a line of code that doesn&rsquo;t unexpectedly change behavior elsewhere in the application. I will not volunteer for your team. Similarly, if I ever find myself leading a team in such a position, I would be incredibly reticent to hire a developer willing to work in my environment. (Unless, of course, I am being hired or hiring a <a href="https://www.google.com/about/jobs/search/#!t=jo&amp;jid=35182&amp;">Software Engineer in Test</a> specifically to fix these testing deficiencies.)</p>

<h2>Prototypes, Too!</h2>

<p><span style="float:right"><img alt="Evils of the Refactoring Cat" src="http://davidsouther.com/assets/images/Code-Refactoring-Cat-in-Bathtub.gif" /></span></p>

<p>I reject the concept of one-off code. If you&rsquo;re at a hackathon, there is that point, about three hours before demo, where your project is AWESOME, and going to win best of show, but you have three hours so you might as well implement a new feature. Without tests, your demo will fail. You will accidentally, in the heat of the moment, break the old, MVP feature with that whiz-bang animation, and have no idea how to get back. At best, you will have a commit to roll back to. At worst, your hackathon time was ruined. With a prototype, you are trying to convince someone to go out of their way to do you a favor. Don&rsquo;t play the lottery &ndash; write tests.</p>

<h2>Call to Action</h2>

<p>At this point, it should be pretty clear I care, very deeply, about code and code quality. I want to use good software, and I want to write good software. Help me! If you write code, find a way to test! Challenge me! Don&rsquo;t let me off the hook when testing gets hard, and I won&rsquo;t let you! Together we can craft better software!</p>

<h3>Some resources for getting on the testing train:</h3>

<ul>
<li><a href="http://www.codinghorror.com/blog/2006/07/i-pity-the-fool-who-doesnt-write-unit-tests.html">I Pity the Fool</a></li>
<li><a href="http://www.amazon.com/exec/obidos/ISBN=0131177052/portlandpatternrA/">Working Effectively with Legacy Code</a> &ndash; <a href="http://www.objectmentor.com/resources/articles/WorkingEffectivelyWithLegacyCode.pdf">Intro PDF</a></li>
<li><a href="http://msdn.microsoft.com/en-us/magazine/gg655487.aspx">Unit Testing 101: Are you testing your javascript?</a></li>
<li><a href="http://www.obeythetestinggoat.com/">Obey the Testing Goat</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Readable D3]]></title>
    <link href="http://DavidSouther.github.io/2013/02/readable-d3"/>
    <updated>2013-02-25T22:26:58-05:00</updated>
    <id>http://DavidSouther.github.io/2013/02/readable-d3</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/mbostock/d3/wiki/Gallery">d3 example code</a> is horribly convoluted, depending on dozens of unstructured variables (and often some global magic) to achieve even the simplest effects. To improve the readability of my d3 projects, I&rsquo;ve introduced a Canvas container, with the most commonly used properties conveniently encapsulated in a single object. Combined with mbostocks discussion in <a href="http://bost.ocks.org/mike/chart/">Towards Reusable Charts</a>, the canvas container can be used in nearly any project to greatly improve the structure and quality of d3 code.</p>

<!-- more -->


<p>```javascript &ldquo;Readable Canvas (canvas.js)&rdquo; <a href="https://gist.github.com/DavidSouther/5035560#file-canvas-js">https://gist.github.com/DavidSouther/5035560#file-canvas-js</a>
(function(){
  /*</p>

<pre><code>Get a new SVG canvas, with margins and scales. Pass an object as `options` to
set values. Defaults:

{
  size: # Size of SVG. Returned size will be smaller by the size of the margins.
    width: 960
    height: 500
  margin: # Margins for the graphic.
    top: 20
    right: 20
    bottom: 30
    left: 40
  scale: # d3.scales to scale against the canvas
    x: linear
    y: linear
  domain: # Domain of scales for the canvas.
    x: [0, 1]
    y: [0, 1]
}

@param root String selector for finding the SVG element.
@param options Object matching the defaults to override.
@return Object with defaults, overriden by the options, and an additional two properties:
  {
    svg: SVG_Element # SVG root
    defs: SVG_Defs_Element # &lt;defs&gt; to attach gradient and filter definitions to.
  }
</code></pre>

<p>  */
  this.Canvas = function(root, options){</p>

<pre><code>var margin, width, height, svg, scales, canvas;
root == null &amp;&amp; (root = 'body');
options == null &amp;&amp; (options = {});
options.size || (options.size = {});
options.margin || (options.margin = {});
options.scale || (options.scale = {});
margin = {
  top: options.margin.top || 20,
  right: options.margin.top || 20,
  bottom: options.margin.top || 30,
  left: options.margin.top || 40
};
margin.leftright = margin.left + margin.right;
margin.topbottom = margin.top + margin.bottom;
width = (options.size.width || 960) - margin.leftright;
height = (options.size.height || 500) - margin.topbottom;
svg = d3.select(root).attr({
  'width': width + margin.left + margin.right,
  'height': height + margin.top + margin.bottom
});
scales = {
  x: d3.scale[options.scale.x || 'linear']().range([0, width]).domain(options.domain.x || [0, 1]).nice(),
  y: d3.scale[options.scale.y || 'linear']().range([0, height]).domain(options.domain.y || [0, 1]).nice()
};
canvas = {
  size: {
    width: width,
    height: height
  },
  margin: margin,
  scale: scales,
  svg: svg,
  defs: svg.select('defs')
};
return canvas;
</code></pre>

<p>  };
}).call(this);
```</p>

<p>This version binds the Canvas closure function to Window. Most of the code is to ensure the appropriate fields are set on the options object. The returned object has the final details of the drawing surface, including its size, the margins, and d3 scales calibrated to the canvas' coordinates. It also includes a refernce to the root SVG element, as well as the svg:defs element containing any filters or gradients defined for the image.</p>

<p>This object works exceptionally well as the config parameter for reusable charts.</p>

<p>```javascript Herzsprung Russel Diagram (starmap.js) <a href="https://gist.github.com/DavidSouther/5035560#file-starmap-js">https://gist.github.com/DavidSouther/5035560#file-starmap-js</a>
(function(){
  var spectrate, Starmap, prepare;</p>

<p>  // Small helper to look up a string
  spectrate = function(star){</p>

<pre><code>return "class" + spectral['class'](+star.temp);
</code></pre>

<p>  };</p>

<p>  // Given a canvas, add gradient definitions to the svg:defs element.
  prepare = function(canvas){</p>

<pre><code>var defs, grads;
defs = canvas.defs;
grads = defs.selectAll('radialGradient')
  // A list of spectral classes
  .data(spectral.spectro)
  .enter()
  .append('svg:radialGradient')
  .attr({
    'id': function(it){ return spectrate(it); },
    'cx': +0.5,
    'cy': +0.5,
    'r': +1
  });
grads.append('stop')
  .attr({
    'stop-color': function(it){ return it.color.brighter(); },
    'offset', '0%'
  });
grads.append('stop')
  .attr({
    'stop-color': function(it){ return it.color; },
    'offset': '100%'
  });
</code></pre>

<p>  };</p>

<p>  this.Starmap = function(canvas){</p>

<pre><code>var star;
prepare(canvas);

// Callable function to draw circles in a selection
// EG a stencil
star = function(selection){
  var circles;
  circles = selection.enter()
    .append('svg:circle')
    .attr({
      "r": 20,
      "class": "star"
    })
    .style({
      "opacity": 0.9
    });
  circles.attr({
    "cx": function(it){ return canvas.scale.x(+it.temp); },
    "cy": function(it){ return canvas.scale.y(+it.mag); },
    "fill": function(it){ return "url(#" + spectrate(it) + ")"; }
  });
  selection.exit().remove();
};

// The main stencil. Takes an svg:g layer from inside canvas.svg
return function(layer){
  // Load the spectrum data
  d3.csv("hr.csv", function(error, stars){
    layer.attr({
        'id': "herzrus",
        'transform': "translate(" + canvas.margin.left + ", " + canvas.margin.right + ")"
      })
      .style('opacity', 0.9)
      .selectAll('.star')
      .data(stars)
      // Chained call to the reusable star stencil.
      .call(star);
  });
};
</code></pre>

<p>  });
}).call(this);
```</p>

<p>In this example, StarMap will draw a Herzsprung Russel diagram on the layer. An HR diagram is a log-linear scatterplot of stellar temperature to luminosity. This example takes a canvas to attach Gradient definitions to, and returns a function that will draw the HR diagram on a layer. The stencil function loads data from a CSV file, and uses an inner stencil funtion to draw the individual stars.</p>

<p>Using the two is similarly easy.</p>

<p>```html Starmap <a href="https://gist.github.com/DavidSouther/5035560#file-starmap-html">https://gist.github.com/DavidSouther/5035560#file-starmap-html</a>
&lt;!DOCTYPE html>
<html>
<head></p>

<pre><code>&lt;title&gt;HR in D3&lt;/title&gt;
&lt;script src="http://d3js.org/d3.v3.min.js" /&gt;
&lt;link rel="stylesheet" href="styles/nucleosynth.css"&gt;
&lt;script src="canvas.js" /&gt;
&lt;script src="starmap.js" /&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;svg id="chart"&gt;
    &lt;defs&gt;
        &lt;filter id="oil" filterUnits="objectBoundingBox" x="0%" y="0%" width="100%" height="100%"&gt;
            &lt;femorphology in="SourceGraphic" radius="2" result="result_oil_morph" /&gt;
            &lt;feturbulence type="turbulence" baseFrequency="0.05" numOctaves="2" result="result_oil_turb" /&gt;
            &lt;fedisplacementmap in="result_oil_morph" in2="result_oil_turb" scale=4 xChannelSelector="R" yChannelSelector="G" /&gt;
        &lt;/filter&gt;
    &lt;/defs&gt;
&lt;/svg&gt;
&lt;script type="text/javascript"&gt;
    var background;
    canvas = Canvas('#chart', {
        scale: {
            x: 'log'
        },
        domain: {
            x: [100000, 1000],
            y: [-8, 7]
        }
    });
    background = canvas.svg.append('svg:g')
        .attr('style', 'filter:url(#oil);');
    background.append('svg:image')
        .attr({
            'xlink:href': "assets/dfb.png",
            'width': canvas.size.width + canvas.margin.leftright,
            'height': canvas.size.height + canvas.margin.topbottom,
            'x': 0,
            'y': 0
        });
    Starmap(canvas)(background.append('svg:g'));
&lt;/script&gt;
</code></pre>

<p></body>
```</p>

<p>In this example, the SVG is preloaded in the HTML with a filter already defined. The script gets a canvas with a few custom properties, attaches a background image, then creates the Starmap and uses it immediately.</p>

<p>This pattern has been very helpful keeping my code clean.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Observers? In *my* Syntax?]]></title>
    <link href="http://DavidSouther.github.io/2012/12/observers-in-my-syntax"/>
    <updated>2012-12-07T10:13:24-05:00</updated>
    <id>http://DavidSouther.github.io/2012/12/observers-in-my-syntax</id>
    <content type="html"><![CDATA[<p>Modern graphical programming is dependent on the <a href="http://en.wikipedia.org/wiki/Observer_pattern">observer pattern</a>. Its use in Model-View-Controller architectures vaulted the pattern into widespread use. Its continues to find applicability in event and interrupt based systems. The underlying conceptual pattern is astounding. In traditional APIs, the user is allowed to call library code arbitrarily, but there is no mechanism for a library to call user space code. While this is somewhat obviated by extensive callback usage, having formally defined and documented locations where library code calls user code is a great boon in large-scale software architectures. The observer pattern provides such a mechanism. In short, observers are great. How can they be worked even tighter into a coding environment?</p>

<!-- more -->


<p>This past year has seen an abundance of metamorphic languages targeting JavaScript. <a href="http://gkz.github.com/LiveScript/">LiveScript</a> especially has added a glut of incredibly useful syntax to CoffeeScript, borrowing heavily from Haskell. These improvements capture, in concise syntax, a myriad of concepts that normally take many lines of code. Users of the LiveScript language have access to functional currying, piping, backcalls, and dozens of other operations resulting in less typing and more straightforward programs. The results of these symbols occur in a myriad of ways- some are converted into appropriate JavaScript, while others are handled by introducing hidden functions to introduce the new features. The two mechanisms both work well and in tandem, allowing nearly any combination of additional language features.</p>

<p>I would like to add a series of operations for handling observers in a language&rsquo;s syntax. The operations I propose have been implemented in a <a href="http://gkz.github.com/LiveScript/">fork</a> of LiveScript, and used to great effect in several programs compiled with the fork.</p>

<p>The three symbols are</p>

<ul>
<li><code>:&gt;</code> Observe</li>
<li><code>-:&gt;</code> Unobserve</li>
<li><code>&lt;:</code> Trigger</li>
</ul>


<p>Each is a binary operation, taking on its left hand side a reference to some event, and on its right hand side either a function reference (for observe and unobserve) or a value (for trigger). Events in this syntax are simply properties on an object. Specifically, the left hand side can be a reference to any object, with the right-most property being the property and its container being the scope of the event. In practice:</p>

<p><code>
source = {}
pass = false
source :&gt; !(e) -&gt; pass := e
source &lt;: true
ok pass
</code></p>

<p>Here, <code>source</code> itself is the event. It has a single observer, which sets the global value of <code>pass</code> to the value that <code>source</code> was triggered with. Another example:</p>

<p>```
/<em> &ldquo;Observers and Advisors trigger in correct deep context&rdquo; </em>/
source = {}
source.child = new &ndash;></p>

<pre><code>@pass = 0
this
</code></pre>

<p>add = !&ndash;> @pass++
source.child.event :> add
source.child.event &lt;: {}
equal source.child.pass, 1
```</p>

<p>Here, the object <code>source</code> has a single <code>child</code> with some <code>event</code>. When <code>event</code> is triggered, the observers are called with <code>this</code> bound to <code>source.child</code>, one level up from the event property.</p>

<p>Having these operators is a huge boon in writing event-driven programs. Not only does the codified syntax mean less typing, it provides a clear visual symbol for the concept of observing and triggering a variable. The actual implementation of the eventing is abstracted behind whatever event library the compiler chooses to delegate to. In my original implementation, the event listeners are attached to an array on the event itself, but another library could make the event property a function, a la jQuery, or register it in a private list of event sources, a la string-keyed pub/sub libraries.</p>

<p>My branch is available at <a href="http://github.com/DavidSouther/LiveScript">github.com/DavidSouther/LiveScript</a>. I intend to rewrite the eventing library used in two places. First, it should compile to a known method signature, with options on whether to include the function definition in the compiled scope. This will allow the eventing implementation to decouple from the compiler. Second, I would like to rework the implementation to detect if the event source is a function. This will allow the syntax to handle jQuery events natively.</p>

<p>I would ask <a href="https://github.com/gkz">gkz</a> and other users of LiveScript to consider this approach to an eventing syntax.</p>
]]></content>
  </entry>
  
</feed>
